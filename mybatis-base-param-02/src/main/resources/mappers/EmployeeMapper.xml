<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--总结：从java类到数据库的数据传递，通过#或$实现，有传入单个类型、实体类、注解指定和map四种情况-->
<mapper namespace="com.gxz.mapper.EmployeeMapper">
    <!-- #{}：转换为？问号占位符，只能替代值的位置 (推荐 防止注入攻击)
         ${}：形式传参，底层Mybatis做的是字符串拼接操作 -->
    <select id="queryById" resultType="com.gxz.pojo.Employee">
<!--        select emp_id empId,emp_name empName, emp_salary empSalary from-->
<!--        在settting中开启sql命名到java小驼峰命名的自动映射后，就不用指定别名了-->
<!--        mybatis将自动从数据库的列名映射到Employee类的属性名-->
        select * from t_emp where emp_id = ${id}
    </select>

    <!--场景1： 传入的单个简单类型：key随便写（推荐：使用参数名）-->
    <delete id="deleteById">
        delete from t_emp where emp_id = #{ suibian }
    </delete>
    <!--对于集合返回值，指定泛型即可-->
    <!-- 原因：所有的select查询底层都是调用selectList，本来就是查询集合-->
    <select id="queryBySalary" resultType="com.gxz.pojo.Employee">
        select emp_id empId , emp_name empName , emp_salary empSalary
        from t_emp where emp_salary = #{ salary }
    </select>

    <!-- 场景2： 传入的是一个实体对象:key为Employee类中的属性名-->
    <insert id="insertEmp" useGeneratedKeys="true" keyColumn="emp_id" keyProperty="empId">
        insert into t_emp (emp_name , emp_salary)  values (#{empName},#{empSalary});
    </insert>
    <!-- 主键回显（获取插入数据的主键）：自增长主键、非自增长主键-->
<!-- 自增长:useGeneratedKeys=true表示开启主键回显，keyColumn指定数据库的主键列，keyProperty指定接收主键值的属性-->

    <!--场景3：  方案1： 注解指定  @Param注解  指定多个简单参数的key   key = @Param("value值")  [推荐]
                方案2： mybatis默认机制：形参左到右依次对应 arg0 arg1.. 或 param1 param2.. -->
    <select id="queryByNameAndSalary" resultType="com.gxz.pojo.Employee">
        select emp_id empId , emp_name empName , emp_salary empSalary
        from t_emp where emp_name = #{a} and emp_salary = #{b}
    </select>

    <!-- 场景4： 传入key = map的key即可！-->
    <insert id="insertEmpMap">
        insert into t_emp (emp_name , emp_salary )  values (#{name},#{salary});
    </insert>

</mapper>